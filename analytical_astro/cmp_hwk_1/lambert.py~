#!/usr/bin/env python
"""Lambert Module 

Author: Hunter Mellema
Summary: Provides a lambert_solver object that takes in 2 Keplerian_State objects and
a transfer time and calculates a family of possible transfer solutions 

Note: the first algorithm used here is taken from "Lambert's Problem" by Kate Davis from CCAR 
Note: The second algorithm used here is taken from the Paper "Revisiting Labert's Problem By Dario Izzo" 

"""
import numpy as np
import math

class LambertSolver(object):
    """
    """
    def __init__(self, initial_state, final_state, max_transfer_time, min_transfer_time=None):
        if not isinstance(initial_state, 'Keplerian_State') or not isinstance(final_state, 'Keplerian_State'):
            raise TypeError("The Lambert Solver can only accept Keplerian_State objects")
        if not initial_state.mu == final_state.mu:
            raise ValueError("Both states MUST have the same gravitaional parameter: mu")
        self.initial_state = initial_state
        self.final_state = final_state

    def solve(self):
        """ """
        delta_ecc_anom = self.final_state.eccentric_anomaly - self.initial_state.eccentric_anomaly
        c_2 = (1 - math.cos(delta_ecc_anom)) / delta_ecc_anom**2
        c_3 = (delta_ecc_anom - math.sin(delta_ecc_anom))
        





        

    def solve_izzo(self, ):
        """ """
        if not 


        
    def solution_filter(self, max_transfer_time, min_transfer_time=None):
        
    def solution_to_state(self, index):
        """ """ 
        
    def plot():
        """ """


    def __findxy(lamb_param, period)
